{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "754e7b76-d5d1-4b08-a67c-6ce1423e0bd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "beb4108a-5a56-4955-b143-ee99721c3609",
   "metadata": {},
   "outputs": [],
   "source": [
    "#A def keyword is used to create a function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f275b4f2-b8e1-459d-a16e-b8b9aa7ad350",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n"
     ]
    }
   ],
   "source": [
    "def is_odd(number):\n",
    "    return number % 2 == 1\n",
    "\n",
    "def print_odd_numbers(numbers):\n",
    "    odd_numbers = list(filter(is_odd, numbers))\n",
    "    return odd_numbers\n",
    "\n",
    "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n",
    "print(print_odd_numbers(numbers))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "212ad6ac-2604-4610-b1cd-131a6d1d4ecd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "463d180f-b6e2-40b3-9af9-85132922d3ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'When we are writing Python code, functions are something that we cannot overlook. Functions are beneficial \\nin removing the repetition of code and making it modular . Functions generally need some data to work on, and \\nit can be in the form of strings, numbers, or even other functions. In the programming world, this data is\\nreferred to as arguments.'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''When we are writing Python code, functions are something that we cannot overlook. Functions are beneficial \n",
    "in removing the repetition of code and making it modular . Functions generally need some data to work on, and \n",
    "it can be in the form of strings, numbers, or even other functions. In the programming world, this data is\n",
    "referred to as arguments.'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7c9ed2b8-2a07-4194-bea4-214de62f632f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"A simple scenario where you will need functions is- Suppose you are running a website to design greeting cards. If you want to display a greeting message like “Hello name_of_user”, you must ask the user to input their name. You will then pass the input to a function that will display the greeting message.\\n\\nSometimes it is possible that you can't predict the number of arguments that we will be providing to the function. This can cause the problem, and if you don’t know how to handle it, then you will end up getting stuck writing the same code for variable number of arguments.\\n\\n*args are **kwargs are the solution of your problem.\""
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''A simple scenario where you will need functions is- Suppose you are running a website to design greeting cards. If you want to display a greeting message like “Hello name_of_user”, you must ask the user to input their name. You will then pass the input to a function that will display the greeting message.\n",
    "\n",
    "Sometimes it is possible that you can't predict the number of arguments that we will be providing to the function. This can cause the problem, and if you don’t know how to handle it, then you will end up getting stuck writing the same code for variable number of arguments.\n",
    "\n",
    "*args are **kwargs are the solution of your problem.'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b3ef6b6c-b3b9-484e-99e8-2b49096236a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "product: 6\n"
     ]
    }
   ],
   "source": [
    "def multiply_num(num1 , num2):\n",
    "    return num1*num2\n",
    "print(\"product:\" , multiply_num(2,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f6fe9a4f-97d8-4a21-88a1-8aec04a2adbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "product: 15\n"
     ]
    }
   ],
   "source": [
    "print(\"product:\" , multiply_num(3,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cf3221af-7a84-4ac8-874a-796b4bc58912",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sentence:  kwargs are awesome! \n"
     ]
    }
   ],
   "source": [
    "def makesentence(**words):\n",
    "    sentence=\" \"\n",
    "    for word in words.values():\n",
    "        sentence+=word\n",
    "    return sentence\n",
    "    \n",
    "print(\"sentence:\" , makesentence(a= 'kwargs ' , b= 'are ' , c= 'awesome! '))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eb3accfc-2bdf-40db-ae55-1050479d04ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "999615c0-49f8-4753-81c2-7281a431320f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'An iterator in Python is an object that is used to iterate over iterable objects like lists,tuples, dicts,\\nand sets. The Python iterators object is initialized using the iter() method. It uses the next() method \\nfor iteration.\\n\\n1 __iter__(): The iter() method is called for the initialization of an iterator. \\nThis returns an iterator object\\n2 __next__(): The next method returns the next value for the iterable. When we use a for loop to traverse \\nany iterable object, internally it uses the iter() method to get an iterator object, which further uses \\nthe next() method to iterate over. This method raises a StopIteration to signal the end of the iteration.'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''An iterator in Python is an object that is used to iterate over iterable objects like lists,tuples, dicts,\n",
    "and sets. The Python iterators object is initialized using the iter() method. It uses the next() method \n",
    "for iteration.\n",
    "\n",
    "1 __iter__(): The iter() method is called for the initialization of an iterator. \n",
    "This returns an iterator object\n",
    "2 __next__(): The next method returns the next value for the iterable. When we use a for loop to traverse \n",
    "any iterable object, internally it uses the iter() method to get an iterator object, which further uses \n",
    "the next() method to iterate over. This method raises a StopIteration to signal the end of the iteration.'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0a5d893e-7119-479d-a3bc-4f3be0df2d01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "my_list = [2,4,6,8,10,12,14,16,18,20]\n",
    "iterator = iter(my_list)\n",
    "\n",
    "print(next(iterator))\n",
    "\n",
    "print(next(iterator))\n",
    "\n",
    "print(next(iterator))\n",
    "\n",
    "print(next(iterator))\n",
    "\n",
    "print(next(iterator))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6c4c51f0-bf9c-43b8-a93b-517ca9b05117",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4a00cf4-d362-4572-81a6-bd057983be4b",
   "metadata": {},
   "source": [
    "In Python, a generator is a function that returns an iterator that produces a sequence of values when iterated over.\n",
    "\n",
    "Generators are useful when we want to produce a large sequence of values, but we don't want to store all of them in memory at once.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37b7cd70-e96a-4b2c-a0a7-462badb3b732",
   "metadata": {},
   "source": [
    "In Python, similar to defining a normal function, we can define a generator function using the def keyword, but instead of the return statement we use the yield statement.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1bbf5c14-87c5-4500-be65-057edc22b8f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generator_name(arg):\n",
    "    #statement\n",
    "    yeildsomething"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c2095b8-923d-4bdf-8f27-0b52ff478020",
   "metadata": {},
   "source": [
    "Here, the yield keyword is used to produce a value from the generator.\n",
    "\n",
    "When the generator function is called, it does not execute the function body immediately. Instead, it returns a generator object that can be iterated over to produce the values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f59a4479-f5b7-4740-90a4-1c23c2d812f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "def my_generator(n):\n",
    "\n",
    "    # initialize counter\n",
    "    value = 0\n",
    "\n",
    "    # loop until counter is less than n\n",
    "    while value < n:\n",
    "\n",
    "        # produce the current value of the counter\n",
    "        yield value\n",
    "\n",
    "        # increment the counter\n",
    "        value += 1\n",
    "\n",
    "# iterate over the generator object produced by my_generator\n",
    "for value in my_generator(3):\n",
    "\n",
    "    # print each value produced by generator\n",
    "    print(value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "099cca45-b16f-4250-9a2f-2b75fd6fcbfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b9ab0950-8604-4c20-a42d-c8dfad48503b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Input the number of prime numbers you want to generate?  20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 20 Prime numbers:\n",
      "2\n",
      "3\n",
      "5\n",
      "7\n",
      "11\n",
      "13\n",
      "17\n",
      "19\n",
      "23\n",
      "29\n",
      "31\n",
      "37\n",
      "41\n",
      "43\n",
      "47\n",
      "53\n",
      "59\n",
      "61\n",
      "67\n",
      "71\n"
     ]
    }
   ],
   "source": [
    "def is_prime(n):\n",
    "    if n <= 1:\n",
    "        return False\n",
    "    for i in range(2, int(n**0.5) + 1):\n",
    "        if n % i == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "def prime_nums_generator():\n",
    "    n = 2\n",
    "    while True:\n",
    "        if is_prime(n):\n",
    "            yield n\n",
    "        n += 1\n",
    "\n",
    "# Create the generator object\n",
    "primes = prime_nums_generator()\n",
    "\n",
    "# Accept input from the user\n",
    "n = int(input(\"Input the number of prime numbers you want to generate? \"))\n",
    "\n",
    "# Generate and print the first 10 prime numbers\n",
    "print(\"First\",n,\"Prime numbers:\")\n",
    "for _ in range(n):\n",
    "    print(next(primes))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cdb21f1a-3ff7-4edd-a5d3-1b9d46073fd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "29427eee-46ba-4b7a-8df8-4fa761ca85af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fibonacci series: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 "
     ]
    }
   ],
   "source": [
    "def fibonacciSeries(Number):\n",
    "\tif Number == 0:\n",
    "\t\treturn 0\n",
    "\telif Number == 1:\n",
    "\t\treturn 1\n",
    "\telse:\n",
    "\t\treturn fibonacciSeries(Number - 1) + fibonacciSeries(Number - 2)\n",
    "\n",
    "\n",
    "n = int(input())\n",
    "print(\"Fibonacci series:\", end=' ')\n",
    "for n in range(0, n):\n",
    "\tprint(fibonacciSeries(n), end=' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d8af7d24-edc7-4a5d-b3f7-74cc79653a9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e9f71662-a3cf-4165-8e6f-468be216dd34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['p', 'w', 's', 'k', 'i', 'l', 'l', 's']\n"
     ]
    }
   ],
   "source": [
    "list = []\n",
    "\n",
    "for character in \"pwskills\":\n",
    "    list.append(character)\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "86e95ebb-212a-4263-817f-b4ce9fdd3329",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "76d2699f-94d5-4614-9d91-a901de8aef95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter any number: 11\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 11 number is palidrome!\n"
     ]
    }
   ],
   "source": [
    "num = int(input('enter any number:'))\n",
    "temp = num\n",
    "rev = 0\n",
    "while(num>0):\n",
    "    digit = num%10\n",
    "    rev = rev*10+digit\n",
    "    num = num//10\n",
    "if(temp == rev):\n",
    "    print(\"The {0} number is palidrome!\".format(temp))\n",
    "else :\n",
    "    print (\"Not a palindrome!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4c9f6a3b-33e8-4022-82c8-e14c40ce4b69",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "eb5def82-1c85-431d-9acd-6e5a9e0b35eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n"
     ]
    }
   ],
   "source": [
    "list = []\n",
    "for i in range(1,101):\n",
    "    list.append(i)\n",
    "only_odd = [num for num in list if num % 2 == 1]\n",
    " \n",
    "print(only_odd)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "291d3386-5f9d-4842-be5c-95e05e0a847c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
